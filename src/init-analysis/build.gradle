plugins {
//    id "io.spring.dependency-management" version "1.0.6.RELEASE"
    id "application"
    id "com.github.johnrengelman.shadow" version "5.0.0"
    id "net.ltgt.apt-eclipse" version "0.21"
    id "net.ltgt.apt-idea" version "0.21"
    id "com.google.cloud.tools.jib" version "1.0.2"
}

version "0.1"
group "init.analysis"

repositories {
    jcenter()
}

//dependencyManagement {
//    imports {
//        mavenBom 'io.micronaut:micronaut-bom:1.1.0.RC2'
//    }
//}

configurations {
    // for dependencies that are needed for development only
    developmentOnly
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:1.2.0")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
//    annotationProcessor "io.micronaut:micronaut-graal"
    implementation platform("io.micronaut:micronaut-bom:1.2.0")
    compile "io.micronaut:micronaut-http-client"
    compile "io.micronaut:micronaut-http-server-netty"
    compile "io.micronaut:micronaut-inject"
    compile "io.micronaut:micronaut-validation"
    compile "io.micronaut:micronaut-runtime"
    compile "io.micronaut:micronaut-management"
    compile "commons-codec:commons-codec:1.13"
    compile "com.google.code.gson:gson:2.8.6"
    compile "com.google.cloud:google-cloud-video-intelligence:0.115.0-beta"
    runtime "ch.qos.logback:logback-classic:1.2.3"
    testAnnotationProcessor platform("io.micronaut:micronaut-bom:1.2.0")
    testAnnotationProcessor "io.micronaut:micronaut-inject-java"
    testImplementation "org.junit.jupiter:junit-jupiter-api"
    testImplementation "io.micronaut.test:micronaut-test-junit5"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
//    testCompile "org.junit.jupiter:junit-jupiter-api"
//    testCompile "io.micronaut.test:micronaut-test-junit5"
//    testRuntime "org.junit.jupiter:junit-jupiter-engine"
}

run.classpath += configurations.developmentOnly
test.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')
shadowJar {
    mergeServiceFiles()
}
mainClassName = "com.netstream.ch.lab.crappy_crocodile.init.analysis.Application"
// use JUnit 5 platform
test {
    useJUnitPlatform()
}
tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

jib {
    to {
        image = "eu.gcr.io/$gcpProjectId/$gcrImage"
        credHelper = "gcr"
    }
    from {
        image = "adoptopenjdk/openjdk11-openj9:alpine-slim"
    }
    container {
        jvmFlags = [
                // this flag is appropriate for Serverless deployments
                // reducing startup time by constraining the JIT
                '-XX:TieredStopAtLevel=1',
                '-XX:MaxRAM=256m'
        ]
    }
}